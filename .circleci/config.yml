version: 2.1

orbs:
  # The elastic beanstalk orb is used to deploy backend build to AWS EB
  eb: circleci/aws-elastic-beanstalk@2.0.0
  # The node orb is used to install dependecies, build and cache for other calls
  node: circleci/node@5
# The S3 orb will setup the aws-cli and quickly copy or sync anything to s3.
  aws-s3: circleci/aws-s3@2.0
  # Browser tools for chrome
  browser-tools: circleci/browser-tools@1.2.4
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows

executors:
  node_chrome:
    docker:
      - image: 'cimg/node:17.5-browsers'
    working_directory: ~/project
jobs:
  frontend-install-packages:
      executor: node_chrome
      steps:
      - checkout
      - node/install-packages:
          app-dir: udagram-frontend
      - persist_to_workspace:
          root: ~/
          paths:
            - project
  frontend-test:
    executor: node_chrome
    steps:
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
          name: Check install
      - attach_workspace:
          at: ~/
      - run:
          command: cd udagram-frontend && npm run test
    
  frontend-build:
    executor: node/default
    steps:
      - attach_workspace:
          at: ~/
      - run:
          command:
            cd udagram-frontend && npm run build
  frontend-deploy:
    executor: node/default
    steps:
      - attach_workspace:
          at: ~/
      - aws-s3/copy:
          from: udagram-frontend/www/
          to: s3://udagram-fe
          arguments: --recursive
  backend-install-packages:
    executor: node/default
    steps:
      - checkout
      - node/install-packages:
          app-dir: udagram-api
          
workflows:
  CICD: 
    jobs:
      - frontend-install-packages:
          filters:
            branches:
              only:
                main
      - frontend-test:
          requires:
            - "frontend-install-packages"
      - frontend-build:
          requires:
            - "frontend-test"
      - frontend-deploy:
          requires:
            - "frontend-build"
            
      - backend-install-packages:
          filters:
            branches:
              only:
                main
      - node/run:
          name: backend-test
          requires:
            - "backend-install-packages"
          app-dir: udagram-api
          npm-run: test
          version: "15.1"
      - node/run:
          name: Backend/ Build and Deploy
          npm-run: build
          app-dir: udagram-api
          requires:
            - "backend-test"
          version: "15.1"
          post-steps:
            - eb/setup
            - run:
                command: cd udagram-api/www && eb init udagram-backend -r $AWS_DEFAULT_REGION -p node.js && eb setenv AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION AWS_REGION=$AWS_REGION AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY DATABASE_PORT=$DATABASE_PORT JWT_SECRET=$JWT_SECRET PORT=$PORT POSTGRES_DB=$POSTGRES_DB POSTGRES_HOST=$POSTGRES_HOST POSTGRES_PASSWORD=$POSTGRES_PASSWORD POSTGRES_USERNAME=$POSTGRES_USERNAME URL=$URL && eb deploy Udagrambackend-env-1